#pragma kernel FrustumCullMain
#define KERNEL_SIZE_X 64

struct InstancePara
{
	float4x4 model;
	float4 padding_for_other_para;
};
StructuredBuffer<InstancePara> _InstanceBuffer;
RWStructuredBuffer<uint> _ArgsBuffer;
RWStructuredBuffer<uint> _VisibilityBuffer;
uint _Count;
float3 _BoundsCenter;
float3 _BoundsExtent;
float4 _CullingPlanes[6];

inline bool PlaneTest(float4 plane, float3 boundsCenter, float3 boundsExtent, float4x4 model)
{
	float4 planeLocal = mul(model,plane);
	float3 normalAbs = abs(planeLocal.xyz);
	float radius = dot(normalAbs, boundsExtent);
	float dist = dot(planeLocal.xyz, boundsCenter) + planeLocal.w;
	return radius + dist > 0;
}

[numthreads(KERNEL_SIZE_X, 1, 1)]
void FrustumCullMain(uint3 id : SV_DispatchThreadID)
{
	if (id.x < _Count)
	{
		float4x4 mT = transpose(_InstanceBuffer[id.x].model);
		[unroll]
		for (int i = 0; i < 6; i++) 
		{
			if (!PlaneTest(_CullingPlanes[i], _BoundsCenter, _BoundsExtent, mT))
			{
				return;
			}
		}
		int currentIndex = 0;
		InterlockedAdd(_ArgsBuffer[1], 1, currentIndex);
		_VisibilityBuffer[currentIndex] = id.x;
	}
}